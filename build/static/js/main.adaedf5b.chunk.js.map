{"version":3,"sources":["Ingredient.js","IngredientList.js","ClearBurger.js","BurgerPane.js","App.js","serviceWorker.js","index.js"],"names":["Ingredient","props","ingredient","IngredientList","ingredients","map","key","ket","name","ClearBurger","BurgerPane","burgerSeed","color","App","useState","burgerPaneIngredients","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gLAUeA,EARI,SAACC,GAClB,OACE,6BACE,4BAAKA,EAAMC,cCWFC,EAbQ,SAACF,GAExB,OACE,6BACE,4BACCA,EAAMG,YAAYC,KAAI,SAACH,EAAYI,GAAb,OACrB,wBAAIC,IAAKD,GAAK,kBAAC,EAAD,CAAYJ,WAAYA,EAAWM,cCExCC,EATK,SAACR,GACnB,OACE,6BACE,kDCQSS,EATI,SAACT,GAClB,OACE,6BACE,kBAAC,EAAD,CAAaG,YAAaH,EAAMG,cAChC,kBAAC,EAAD,QCJFO,EAAa,CACf,CAACH,KAAM,aAAcI,MAAO,eAC5B,CAACJ,KAAM,aAAcI,MAAO,cAC5B,CAACJ,KAAM,kBAAmBI,MAAO,QACjC,CAACJ,KAAM,eAAgBI,MAAO,aAC9B,CAACJ,KAAM,aAAcI,MAAO,WAC5B,CAACJ,KAAM,YAAaI,MAAO,WAC3B,CAACJ,KAAM,mBAAoBI,MAAO,WAClC,CAACJ,KAAM,gBAAiBI,MAAO,aAC/B,CAACJ,KAAM,UAAWI,MAAO,aACzB,CAACJ,KAAM,SAAUI,MAAO,UACxB,CAACJ,KAAM,QAASI,MAAO,UACvB,CAACJ,KAAM,QAASI,MAAO,gBAsBVC,EAnBH,WAAM,MAEsBC,mBAASH,GAF/B,mBAETP,EAFS,aAG0CU,mBAAS,KAHnD,mBAGTC,EAHS,UAWhB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAgBZ,YAAaA,IAC7B,kBAAC,EAAD,CAAYA,YAAaW,MCrBXE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.adaedf5b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Ingredient = (props) => {\n  return (\n    <div>\n      <h3>{props.ingredient}</h3>\n    </div>\n  )\n}\n\nexport default Ingredient","import React from 'react';\nimport Ingredient from './Ingredient';\n\nconst IngredientList = (props) => {\n\nreturn (\n  <div>\n    <ul>\n    {props.ingredients.map((ingredient, key) => \n      <li ket={key}><Ingredient ingredient={ingredient.name} /></li>\n    )}\n    </ul>\n  </div>\n  )   \n}\n\nexport default IngredientList;","import React from 'react'\n\nconst ClearBurger = (props) => {\n  return(\n    <div>\n      <button>\n         I'm a Burger\n      </button>\n    </div>\n  )\n}\nexport default ClearBurger","import React from 'react'\nimport BurgerStack from './BurgerPane'\nimport ClearBurger from './ClearBurger'\n\nconst BurgerPane = (props) => {\n  return (\n    <div>\n      <BurgerStack ingredients={props.ingredients}/>\n      <ClearBurger />\n    </div>\n  )\n}\n\nexport default BurgerPane","import React, { useState } from 'react';\nimport IngredientList from './IngredientList'\nimport Burgerpane from './BurgerPane'\n\nlet burgerSeed = [\n  {name: 'Kaiser Bun', color: 'saddlebrown'},\n  {name: 'Sesame Bun', color: 'sandybrown'},\n  {name: 'Gluten Free Bun', color: 'peru'},\n  {name: 'Lettuce Wrap', color: 'olivedrab'},\n  {name: 'Beef Patty', color: '#3F250B'},\n  {name: 'Soy Patty', color: '#3F250B'},\n  {name: 'Black Bean Patty', color: '#3F250B'},\n  {name: 'Chicken Patty', color: 'burlywood'},\n  {name: 'Lettuce', color: 'lawngreen'},\n  {name: 'Tomato', color: 'tomato'},\n  {name: 'Bacon', color: 'maroon'},\n  {name: 'Onion', color: 'lightyellow'}\n]\n\nconst App = () => {\n  // eslint-disable-next-line\n  const [ingredients, setIngredients] = useState(burgerSeed)// eslint-disable-next-line\n  const [burgerPaneIngredients, serBurgerPaneIngredients] = useState([])\n\n  // const addIngredient = (ingredient) => {\n  //   setIngredients([ingredient, ...addedIng])\n  //   console.log(addedIng) \n  // }\n\n\n  return (\n    <div className=\"App\">\n      <IngredientList ingredients={ingredients}/>\n      <Burgerpane ingredients={burgerPaneIngredients}/> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}